% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute.interactions.R
\name{compute.interactions}
\alias{compute.interactions}
\title{Compute Derivative function}
\usage{
compute.interactions(
  formula,
  summarytable,
  varcov,
  data = NULL,
  diffTerm,
  Scalor,
  ci = 0.95,
  df = 1000,
  graph = FALSE,
  drawgg = FALSE,
  xlab_text = NULL,
  ylab_text = NULL,
  main_text = NULL,
  mean_lty = 1,
  mean_lwd = 1,
  mean_col = "black",
  ci_lty = 1,
  ci_lwd = 0.5,
  ci_col = "black",
  yint_lty = 2,
  yint_lwd = 1,
  yint_col = "black"
)
}
\arguments{
\item{formula}{the model formula}

\item{summarytable}{summary table with beta coefficients}

\item{varcov}{the variance-covariance matrix from any model of interest}

\item{data}{data frame}

\item{diffTerm}{the variable in the model with respect to which to partial derivatives of the regression equation a computed}

\item{Scalor}{the list of values for the variables used in the derivative of the regression model}

\item{ci}{95 percent confidence interval (by default)}

\item{df}{degrees of freedom}

\item{graph}{TRUE/FALSE R plot is drawn, FALSE, by default}

\item{drawgg}{TRUE/FALSE ggplot is drawn, FALSE, by default}

\item{xlab_text}{x-axis label}

\item{ylab_text}{y-axis label}

\item{main_text}{add title to a plot}

\item{mean_lty}{line type for the average line}

\item{mean_lwd}{line width for the average line}

\item{mean_col}{line color for the average line}

\item{ci_lty}{line type for the confidence interval}

\item{ci_lwd}{line width for the average line}

\item{ci_col}{line color for the average line}

\item{yint_lty}{line type for the intercept line}

\item{yint_lwd}{line width for the intercept line}

\item{yint_col}{line color for the intercept line}
}
\value{
partial derivative of the regression equation
}
\description{
This function helps to plot marginal effects of the linear model.
}
\examples{

library(Amelia)
library(mitools)
library(plm)
library(ggplot2)

compute_cluster<-function(dat, formula, model, effect){
           fit <- lapply(dat, function(x){
           pdta <- pdata.frame(x, index=c("COUNTRY", "YEAR"));
           if(model!='between'|model!='random'){
           plm(formula, data = pdta, model = model, effect = effect)
           }else{
           plm(formula, data = pdta, model = model)
           }
           })

           vcovHC_matrix <- lapply(fit, function(y) vcovBK(y, cluster="group"))
           betas <- MIextract(fit, fun = coef)
           r.sq <- round(mean(unlist(MIextract(fit, fun = r.squared))), 2)
           sum.m  <- summary(MIcombine(betas, vcovHC_matrix))
           vars <- vcovHC_matrix
           multi.dat<- MIextract(fit, fun=model.frame)
           combine.dat <-Reduce(`+`, multi.dat) / length(multi.dat)
           sum.m <- summary(MIcombine(betas, vars))
           vcovm <-MIcombine(betas, vcovHC_matrix)$variance
           res <- list (betas=betas, vars=vars, sum.m=sum.m,
           vcovm=vcovm, combine.dat=combine.dat, r.sq=r.sq)

           return(res)}

dat<-read.csv(system.file("example.csv", package="Interactions"))

#Imputation of the panel data
a.out <- amelia(dat, m = 3, ts = "YEAR", cs = "COUNTRY",
               ords = "polity2", polytime=1, lags="economics1")

mydata <- imputationList(list(a.out[[1]]$imp1, a.out[[1]]$imp2, a.out[[1]]$imp3))

#Run plm on imputed data
mformula <- as.formula("polity2 ~ Exclusivity_Index * time_since_initial_const +
                                 Exclusivity_Index * lag(economics1) + al_ethnic + al_language + al_religion")
run_mod <- compute_cluster(dat = mydata$imputations, formula = mformula, model = "random", effect=NULL)

#Find partial derivative of regression equation
compute.derivative(run_mod$vcovm, "Exclusivity_Index")
# "b1 + b7 * time_since_initial_const + b8 * lag(economics1)"
# For every variable that appears in the derivative, the user must specify the range of values for that variable.
# Only one variable can have a range of values more than 1 (i.e. running variable); other variables need to be fixed at a single value, such as the mean.
# If a partial derivative contains interaction terms that involve variables with previously defined scales, those terms can be ignored.
# "b1 + b7 * time_since_initial_const + b8 * lag(economics1)"
#           ^      seq(1,80,1)      ^        ^     mean    ^
#Subsequently, all the defined scales or rulers can be merged into a list.
mod.scalor = list(seq(0,80,.01), 8.64)

#Compute and draw marginal effects

compute.interactions(formula = mformula,
                    summarytable = run_mod$sum.m,
                    varcov = run_mod$vcovm,
                    data = run_mod$combine.dat,
                    diffTerm = "Exclusivity_Index",
                    xlab_text = "Time",
                    ylab_text = expression(paste(partialdiff,"Polity"," / ",partialdiff, EI[general])),
                    Scalor = mod.scalor,
                    ci=0.95,
                    df = 1000,
                    graph=FALSE,
                    drawgg=TRUE,
                    ci_col = "blue")
}
